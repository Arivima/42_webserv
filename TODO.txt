TODO 
		MA urgent questions
			-	redirection : file to add to path
			-   utils.cpp 635 throw SystemCallException("readdir() : ");//!*HttpError 500 server internal error
			-   utils.cpp 654 throw SystemCallException("closedir()");//!*HttpError 500 server internal error
			-   utils.cpp 657 throw SystemCallException("opendir()");//!*HttpError 500 server internal error
			-	check //! //TODO

		Prioritario
			1. Testing
				-	Throughout testing, record tests -> add to config and postman
				-	Subject
				-	Correction sheet
				-	Postman
				-	Leaks
				-	SIEGE
				-	Tester, write tests with python
			
			2. M Timeout browser (creare la nuova request solo quando arriva qualcosa di nuovo)
			3. M Body size for chunked
			3. M debug Makefile
			4. script for file Upload
			5. M Response getDirectoryContentList wrap try catch in generateGETResponse, catch SystemCallException and rethrow as HttpError 500
			6. M file binary with POST redirect

	Matteo
		1.	chunked.py risolvere caso ContentTooLarge
		2.	Controllare se fare (max_body_size -= (std::cout.tellp() - prev_chars);) anche in POSTNextChunk() (lo faccio giá in CGINextChunk())
		meno importante
		-	Change req url name to "uri"
		-	check for every member that should be a reference
	Arielle
		-	GET redirect postman
		-	finish testing postman
		-	Landing Page carina
	check
		• what happens if 10 clients try to upload 1G of data -> running out of memory cases
		• Your server must be compatible with the web browser of your choice.
		• Stress tests your server. It must stay available at all cost.

	Additional tasks if there is time:
		- 	fare un log
		- 	cookie ?
	Before pushing : 
		-	take out correction sheet
		-	clean todo
		-	update headers
	after pushing :
		- 	update webserv.doc
		-	create project flowchart
		-	update documentation, dictionnary etc

# **************************************************************************** #
#                                                                              #
#    header                                               :::      ::::::::    #
#    By: team_PiouPiou                                  :+:      :+:    :+:    #
#        avilla-m <avilla-m@student.42.fr>            +:+ +:+         +:+      #
#        mmarinel <mmarinel@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/05/29 12:15:29 by mmarinel          #+#    #+#              #
#    Updated: 2023/07/14 14:20:20 by mmarinel         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #


























///////////////////////////////////////////////////////////////////////////////////////////////////////

Matteo
	13	valutare se contollare la presenza di location block ripetuti

To assign
	1.	implementare redirections in GET
	9.	Check compatibility with Chrome/Firefox (set right headers)

Meno Prioritario
	1	refactoring HttpError ----> usare vector of char
		-forse, in HttpError chiudere la connessione dopo aver ritornato un errore


Config file:
	1. host directive
	2. client body_size
	3. routes
		3.1 accepted methods
		3.2 redirection
		3.3 autoindex
		3.4	directive for uploading files
		3.4 CGI


ARCHIVES not yet done but useless (maybe) !
	3.util : fare funzione che, presa una stringa, rimuove tutti i caratteri a partire da uno dato,
		se esiste nella stringa.


to short
//TODO Request.hpp
//TODO	1.	Write Request.cpp...continue refactoring (making of Request class)
//TODO	2.	change req map as being object not ref inside Response
//TODO	3.	write switch_state function in ConnectionSocket (pay attention first creating the new
//TODO		and then deleting the old one as the new may need results from the old)
//TODO	4. use exceptions in types.h (remove SockEof and other exceptions inside classes
//TODO	ConnectionSocket, Request and Response )
//TODO	5. handle SockEof exception inside Worker serve_clientS loop. (Not inside ConnectionSocket!)
//TODO	6. Refactor ConenctionSocket.
//TODO
//TODO


//////////////////////////////////////////////////////////////////////////////////////////////////

TroubleShooting

Ideas

Matteo
Idea per handling binary data in body of request
	1.	Splitta body e request
		1.1	request resta una mappa
		1.2	body diventa un vector<char>
	2.	Request
		2.1	Sostituisci gli stream con vector di char
			2.1.1	recv_buf resta un array
			2.1.2	vector<char> sostituisce lo stream e ci dumpiamo il contenuto letto dal buffer
				2.1.2.1	possiamo usare le funzioni find(), erase(), etc. di vector per sostuire getline
			2.1.3	passiamo il body e la richiesta alle varie classi come due variabili diverse
			2.1.4	per scrivere il body in un file, apriamo il file con ofstream e open_mode std::ios_binary
					e usiamo basic_ostream& write( const char_type* s, std::streamsize count )
					con body.data() come const char*
					e body.size() come count
