
Arielle:
	-	do many bisous to Matteo
	-	do many hugs to Matteo    
	- 	test CGI
	-	Do DELETE

Matteo
	-	Mettere location root e upload_path come variabili di classe di Response
	-	Change req url name to "uri"
	-	Refactor Request class
	-	Make sure, in every place, that we on't do any string functions on the body string except for insert
	-	Do POST

	-Config : rimuovi tab nel file di configurazione
	-Response : rimuovi subito query string se non Ã© GET
	-Respone : make req a reference                         
	-check for every member that should be a reference
	- (forse)togliere set buffer size del socket nel Worker (setsockopt)
	- implement redirections
	- implement client body_size
	- implement chuncked Encoding
	- implement timers
	- scrivere script per le CGI
	
	- binary data
	- fare un log
	- cookie ?






















///////////////////////////////////////////////////////////////////////////////////////////////////////

Prioritaria
	7.	Check against subject, correction sheet, tester, write tests with python, Postman 
Arielle
	10.	Give different HTTP response status code depending on errors - throughout the response class, every where there is a 
		Response (dirlisting, etc.) : give different error codes based on reading of errno
		10.1	file not found
		10.2	unauthorized
		// https://www.restapitutorial.com/httpstatuscodes.html
		// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
		// https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
		

Matteo
	8.	implement timers
	13	valutare se contollare la presenza di location block ripetuti

To assign
	1.	implementare redirections in GET
	2.	gestire client body_size
	9.	Check compatibility with Chrome/Firefox (set right headers)

Meno Prioritario
	1	refactoring HttpError ----> usare vector of char
		-forse, in HttpError chiudere la connessione dopo aver ritornato un errore


Config file:
	1. host directive
	2. client body_size
	3. routes
		3.1 accepted methods
		3.2 redirection
		3.3 autoindex
		3.4	directive for uploading files
		3.4 CGI

Overall at the end:
- clean exceptions / error syntax to make it consistent throughout files
- use errno ?
- clean all comments
- put all implementations in .cpp

ARCHIVES not yet done but useless (maybe) !
	3.util : fare funzione che, presa una stringa, rimuove tutti i caratteri a partire da uno dato,
		se esiste nella stringa.


to short
//TODO Request.hpp
//TODO	1.	Write Request.cpp...continue refactoring (making of Request class)
//TODO	2.	change req map as being object not ref inside Response
//TODO	3.	write switch_state function in ConnectionSocket (pay attention first creating the new
//TODO		and then deleting the old one as the new may need results from the old)
//TODO	4. use exceptions in types.h (remove SockEof and other exceptions inside classes
//TODO	ConnectionSocket, Request and Response )
//TODO	5. handle SockEof exception inside Worker serve_clientS loop. (Not inside ConnectionSocket!)
//TODO	6. Refactor ConenctionSocket.
//TODO
//TODO


//////////////////////////////////////////////////////////////////////////////////////////////////

TroubleShooting

Ideas

Matteo
Idea per handling binary data in body of request
	1.	Splitta body e request
		1.1	request resta una mappa
		1.2	body diventa un vector<char>
	2.	Request
		2.1	Sostituisci gli stream con vector di char
			2.1.1	recv_buf resta un array
			2.1.2	vector<char> sostituisce lo stream e ci dumpiamo il contenuto letto dal buffer
				2.1.2.1	possiamo usare le funzioni find(), erase(), etc. di vector per sostuire getline
			2.1.3	passiamo il body e la richiesta alle varie classi come due variabili diverse
			2.1.4	per scrivere il body in un file, apriamo il file con ofstream e open_mode std::ios_binary
					e usiamo basic_ostream& write( const char_type* s, std::streamsize count )
					con body.data() come const char*
					e body.size() come count
